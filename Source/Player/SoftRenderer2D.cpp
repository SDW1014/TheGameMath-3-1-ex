
#include "Precompiled.h"
#include "SoftRenderer.h"
#include <random>
using namespace CK::DD;

// 격자를 그리는 함수
void SoftRenderer::DrawGizmo2D()
{
	auto& r = GetRenderer();
	const auto& g = Get2DGameEngine();

	// 그리드 색상
	LinearColor gridColor(LinearColor(0.8f, 0.8f, 0.8f, 0.3f));

	// 뷰의 영역 계산
	Vector2 viewPos = g.GetMainCamera().GetTransform().GetPosition();
	Vector2 extent = Vector2(_ScreenSize.X * 0.5f, _ScreenSize.Y * 0.5f);

	// 좌측 하단에서부터 격자 그리기
	int xGridCount = _ScreenSize.X / _Grid2DUnit;
	int yGridCount = _ScreenSize.Y / _Grid2DUnit;

	// 그리드가 시작되는 좌하단 좌표 값 계산
	Vector2 minPos = viewPos - extent;
	Vector2 minGridPos = Vector2(ceilf(minPos.X / (float)_Grid2DUnit), ceilf(minPos.Y / (float)_Grid2DUnit)) * (float)_Grid2DUnit;
	ScreenPoint gridBottomLeft = ScreenPoint::ToScreenCoordinate(_ScreenSize, minGridPos - viewPos);

	for (int ix = 0; ix < xGridCount; ++ix)
	{
		r.DrawFullVerticalLine(gridBottomLeft.X + ix * _Grid2DUnit, gridColor);
	}

	for (int iy = 0; iy < yGridCount; ++iy)
	{
		r.DrawFullHorizontalLine(gridBottomLeft.Y - iy * _Grid2DUnit, gridColor);
	}

	ScreenPoint worldOrigin = ScreenPoint::ToScreenCoordinate(_ScreenSize, -viewPos);
	r.DrawFullHorizontalLine(worldOrigin.Y, LinearColor::Red);
	r.DrawFullVerticalLine(worldOrigin.X, LinearColor::Green);
}

// 게임 오브젝트 목록


// 최초 씬 로딩을 담당하는 함수
void SoftRenderer::LoadScene2D()
{
	// 최초 씬 로딩에서 사용하는 모듈 내 주요 레퍼런스
	auto& g = Get2DGameEngine();

}

// 게임 로직과 렌더링 로직이 공유하는 변수
// 2024 07 02 VALUE START =================================================================================================
// 설명 : 게임 로직과 렌더링 로직이 공유하는 변수를 선언한다.

Vector2 currentPosition(100.0f, 100.0f); // 현재 위치
// 2024 07 02 VALUE END ===================================================================================================

// 게임 로직을 담당하는 함수
void SoftRenderer::Update2D(float InDeltaSeconds)
{
	// 게임 로직에서 사용하는 모듈 내 주요 레퍼런스
	auto& g = Get2DGameEngine();
	const InputManager& input = g.GetInputManager();

	// 게임 로직의 로컬 변수

	// 2024 07 02 UPDATE START =============================================================================================
	// 설명 : 현재 위치를 이동시키는 로직을 구현한다.

	static float moveSpeed = 100.0f;										// 이동 속도
	Vector2 inputVector = Vector2(input.GetAxis(InputAxis::XAxis), input.GetAxis(InputAxis::YAxis)); // 입력 벡터
	Vector2 deltaPosition = inputVector * moveSpeed * InDeltaSeconds;		// 이동량

	currentPosition += deltaPosition;										// 현재 위치 이동
	// 2024 07 02 UPDATE END ===============================================================================================
}

// 렌더링 로직을 담당하는 함수
void SoftRenderer::Render2D()
{
	// 렌더링 로직에서 사용하는 모듈 내 주요 레퍼런스
	auto& r = GetRenderer();
	const auto& g = Get2DGameEngine();

	// 배경에 격자 그리기
	DrawGizmo2D();

	// 렌더링 로직의 로컬 변수

	// 2024 07 02 RENDER START =============================================================================================
	// 설명 : DrawPoint() 함수를 이용하여 현재 위치를 표시하고, DrawLine() 함수를 이용하여 현재 위치에서 선을 그린다.
	
	static float lineLength = 500.0f;										// 선의 길이
	Vector2 lineStart = currentPosition * lineLength;						// 선의 시작점
	Vector2 lineEnd = currentPosition * -lineLength;						// 선의 끝점		
	r.DrawLine(lineStart, lineEnd, LinearColor::LightGray);					// 선 그리기	

	r.DrawPoint(currentPosition, LinearColor::Blue);						// 현재 위치 표시
	r.DrawPoint(currentPosition + Vector2::UnitX, LinearColor::Blue);		// 현재 위치에서 X축으로 1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition - Vector2::UnitX, LinearColor::Blue);		// 현재 위치에서 X축으로 -1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition + Vector2::UnitY, LinearColor::Blue);		// 현재 위치에서 Y축으로 1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition - Vector2::UnitY, LinearColor::Blue);		// 현재 위치에서 Y축으로 -1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition + Vector2::One, LinearColor::Blue);			// 현재 위치에서 대각선으로 1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition - Vector2::One, LinearColor::Blue);			// 현재 위치에서 대각선으로 -1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition + Vector2(1.f, 1.f), LinearColor::Blue);	// 현재 위치에서 대각선으로 1만큼 이동한 위치 표시
	r.DrawPoint(currentPosition - Vector2(1.f, 1.f), LinearColor::Blue);	// 현재 위치에서 대각선으로 -1만큼 이동한 위치 표시

	r.PushStatisticText("Coordinate ; " + currentPosition.ToString());		// 현재 위치 좌표 출력
	// 2024 07 02 RENDER END ===============================================================================================
}

// 메시를 그리는 함수
void SoftRenderer::DrawMesh2D(const class DD::Mesh& InMesh, const Matrix3x3& InMatrix, const LinearColor& InColor)
{
}

// 삼각형을 그리는 함수
void SoftRenderer::DrawTriangle2D(std::vector<DD::Vertex2D>& InVertices, const LinearColor& InColor, FillMode InFillMode)
{
}
